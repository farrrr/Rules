- RULE-SET,Netflix,Netflix
- RULE-SET,Spotify,Spotify

# - RULE-SET,YouTube Music,YouTube
- RULE-SET,YouTube,YouTube

- RULE-SET,Disney Plus,Disney

- RULE-SET,Bahamut,Domestic
- RULE-SET,KKBOX,Domestic
- RULE-SET,KKMedia,Domestic
- RULE-SET,Line Media,Domestic


- RULE-SET,Bilibili,ChinaMedia
- RULE-SET,iQiyi,ChinaMedia
- RULE-SET,Letv,ChinaMedia
# - RULE-SET,MOO,ChinaMedia
- RULE-SET,Netease Music,ChinaMedia
- RULE-SET,Tencent Video,ChinaMedia
- RULE-SET,Youku,ChinaMedia
- RULE-SET,WeMedia,ChinaMedia
- RULE-SET,China Service,ChinaService
- RULE-SET,China IPs,ChinaService
- RULE-SET,DingTalk,ChinaService
- RULE-SET,Tencent,ChinaService

- RULE-SET,ABC,GlobalMedia
- RULE-SET,Abema Media,GlobalMedia
- RULE-SET,Amazon,GlobalMedia
- RULE-SET,Apple News,GlobalMedia
- RULE-SET,Apple Media,GlobalMedia
- RULE-SET,BBC iPlayer,GlobalMedia
- RULE-SET,DAZN,GlobalMedia
- RULE-SET,Discovery Plus,GlobalMedia
- RULE-SET,encoreMediaB,GlobalMedia
- RULE-SET,Fox Now,GlobalMedia
- RULE-SET,Fox+,GlobalMedia
- RULE-SET,HBO,GlobalMedia
- RULE-SET,Hulu Japan,GlobalMedia
- RULE-SET,Hulu,GlobalMedia
- RULE-SET,Japonx,GlobalMedia
- RULE-SET,JOOX,GlobalMedia
- RULE-SET,myMedia SUPER,GlobalMedia
- RULE-SET,Pandora,GlobalMedia
- RULE-SET,PBS,GlobalMedia
- RULE-SET,Pornhub,GlobalMedia
- RULE-SET,Soundcloud,GlobalMedia
- RULE-SET,ViuMedia,GlobalMedia
- RULE-SET,Blizzard,GlobalMedia
- RULE-SET,Sony,GlobalMedia

- RULE-SET,Telegram,Telegram
- RULE-SET,Steam,Steam
- RULE-SET,Speedtest,Speedtest
- RULE-SET,PayPal,PayPal
- RULE-SET,Microsoft,Microsoft

#- RULE-SET,PROXY,Proxy

- RULE-SET,Apple,Apple

- RULE-SET,Scholar,Scholar

- RULE-SET,Domestic IPs,Domestic

- RULE-SET,LAN,DIRECT
- GEOIP,TW,Domestic
- GEOIP,CN,ChinaService
- MATCH,Others

script:
  code: |
    def main(ctx, metadata):
        port_list = [21, 22, 23, 53, 80, 123, 143, 194, 443, 465, 587, 853, 993, 995, 998, 2052, 2053, 2082, 2083, 2086, 2095, 2096, 5222, 5228, 5229, 5230, 8080, 8443, 8880, 8888, 8889]
        ruleset_action = {"Netflix": "Netflix",
            "Spotify": "Spotify",
            "YouTube": "YouTube",
            "Disney Plus": "Disney",
            "Bahamut": "Domestic",
            "KKBOX": "Domestic",
            "KKMedia": "Domestic",
            "Line Media": "Domestic",
            "Bilibili": "ChinaMedia",
            "iQiyi": "ChinaMedia",
            "Letv": "ChinaMedia",
            "Netease Music": "ChinaMedia",
            "Tencent Video": "ChinaMedia",
            "Youku": "ChinaMedia",
            "WeMedia": "ChinaMedia",
            "China Service": "ChinaService",
            "China IPs": "ChinaService",
            "DingTalk": "ChinaService",
            "Tencent": "ChinaService",
            "ABC": "GlobalMedia",
            "Abema Media": "GlobalMedia",
            "Amazon": "GlobalMedia",
            "Apple News": "GlobalMedia",
            "Apple Media": "GlobalMedia",
            "BBC iPlayer": "GlobalMedia",
            "DAZN": "GlobalMedia",
            "Discovery Plus": "GlobalMedia",
            "encoreMediaB": "GlobalMedia",
            "Fox Now": "GlobalMedia",
            "Fox+": "GlobalMedia",
            "HBO": "GlobalMedia",
            "Hulu Japan": "GlobalMedia",
            "Hulu": "GlobalMedia",
            "Japonx": "GlobalMedia",
            "JOOX": "GlobalMedia",
            "myMedia SUPER": "GlobalMedia",
            "Pandora": "GlobalMedia",
            "PBS": "GlobalMedia",
            "Pornhub": "GlobalMedia",
            "Soundcloud": "GlobalMedia",
            "ViuMedia": "GlobalMedia",
            "Blizzard": "GlobalMedia",
            "Sony": "GlobalMedia",
            "Telegram": "Telegram",
            "Steam": "Steam",
            "Speedtest": "Speedtest",
            "PayPal": "PayPal",
            "Microsoft": "Microsoft",
            "Apple": "Apple",
            "Scholar": "Scholar",
            "Domestic IPs": "Domestic",
            "LAN": "DIRECT"
            }
        port = int(metadata["dst_port"])

        if port not in port_list:
            return "DIRECT"

        for rule_name in ctx.rule_providers.keys():
            if ctx.rule_providers[rule_name].match(metadata):
                return ruleset_action[rule_name]

        ip = metadata["dst_ip"] or ctx.resolve_ip(metadata["host"])

        if ip == "":
          return "DIRECT"

        code = ctx.geoip(ip)

        if code == "CN":
          return "ChinaService"

        if code == "TW":
          return "Domestic"

        return "Others"

rule-providers:
  # Reject:
  #   type: http
  #   behavior: classical
  #   url: 'https://raw.githubusercontent.com/farrrr/Rules/main/Clash/Provider/Reject.yaml'
  #   path: ./Rules/Reject
  #   interval: 86400
  # Special:
  #   type: http
  #   behavior: classical
  #   url: 'https://raw.githubusercontent.com/farrrr/Rules/main/Clash/Provider/Special.yaml'
  #   path: ./Rules/Special
  #   interval: 86400
  Netflix:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/farrrr/Rules/main/Clash/Provider/Media/Netflix.yaml'
    path: ./Rules/Media/Netflix
    interval: 86400
  Spotify:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/farrrr/Rules/main/Clash/Provider/Media/Spotify.yaml'
    path: ./Rules/Media/Spotify
    interval: 86400
  # YouTube Music:
  #   type: http
  #   behavior: classical
  #   url: 'https://raw.githubusercontent.com/farrrr/Rules/main/Clash/Provider/Media/YouTube%20Music.yaml'
  #   path: ./Rules/Media/YouTube_Music
  #   interval: 86400
  YouTube:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/farrrr/Rules/main/Clash/Provider/Media/YouTube.yaml'
    path: ./Rules/Media/YouTube
    interval: 86400
  Bilibili:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/farrrr/Rules/main/Clash/Provider/Media/Bilibili.yaml'
    path: ./Rules/Media/Bilibili
    interval: 86400
  iQiyi:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/farrrr/Rules/main/Clash/Provider/Media/iQiyi.yaml'
    path: ./Rules/Media/iQiyi
    interval: 86400
  Letv:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/farrrr/Rules/main/Clash/Provider/Media/Letv.yaml'
    path: ./Rules/Media/Letv
    interval: 86400
  # MOO:
  #   type: http
  #   behavior: classical
  #   url: 'https://raw.githubusercontent.com/farrrr/Rules/main/Clash/Provider/Media/MOO.yaml'
  #   path: ./Rules/Media/MOO
  #   interval: 86400
  Netease Music:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/farrrr/Rules/main/Clash/Provider/Media/Netease%20Music.yaml'
    path: ./Rules/Media/Netease_Music
    interval: 86400
  Tencent Video:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/farrrr/Rules/main/Clash/Provider/Media/Tencent%20Video.yaml'
    path: ./Rules/Media/Tencent_Video
    interval: 86400
  Youku:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/farrrr/Rules/main/Clash/Provider/Media/Youku.yaml'
    path: ./Rules/Media/Youku
    interval: 86400
  WeMedia:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/farrrr/Rules/main/Clash/Provider/Media/WeMedia.yaml'
    path: ./Rules/Media/WeMedia
    interval: 86400
  ABC:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/farrrr/Rules/main/Clash/Provider/Media/ABC.yaml'
    path: ./Rules/Media/ABC
    interval: 86400
  Abema Media:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/farrrr/Rules/main/Clash/Provider/Media/Abema%20Media.yaml'
    path: ./Rules/Media/Abema_Media
    interval: 86400
  Amazon:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/farrrr/Rules/main/Clash/Provider/Media/Amazon.yaml'
    path: ./Rules/Media/Amazon
    interval: 86400
  Apple News:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/farrrr/Rules/main/Clash/Provider/Media/Apple%20News.yaml'
    path: ./Rules/Media/Apple_News
    interval: 86400
  Apple Media:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/farrrr/Rules/main/Clash/Provider/Media/Apple%20Media.yaml'
    path: ./Rules/Media/Apple_Media
    interval: 86400
  Bahamut:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/farrrr/Rules/main/Clash/Provider/Media/Bahamut.yaml'
    path: ./Rules/Media/Bahamut
    interval: 86400
  BBC iPlayer:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/farrrr/Rules/main/Clash/Provider/Media/BBC%20iPlayer.yaml'
    path: ./Rules/Media/BBC_iPlayer
    interval: 86400
  DAZN:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/farrrr/Rules/main/Clash/Provider/Media/DAZN.yaml'
    path: ./Rules/Media/DAZN
    interval: 86400
  Discovery Plus:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/farrrr/Rules/main/Clash/Provider/Media/Discovery%20Plus.yaml'
    path: ./Rules/Media/Discovery_Plus
    interval: 86400
  Disney Plus:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/farrrr/Rules/main/Clash/Provider/Media/Disney%20Plus.yaml'
    path: ./Rules/Media/Disney_Plus
    interval: 86400
  encoreMediaB:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/farrrr/Rules/main/Clash/Provider/Media/encoreMediaB.yaml'
    path: ./Rules/Media/encoreMediaB
    interval: 86400
  Fox Now:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/farrrr/Rules/main/Clash/Provider/Media/Fox%20Now.yaml'
    path: ./Rules/Media/Fox_Now
    interval: 86400
  Fox+:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/farrrr/Rules/main/Clash/Provider/Media/Fox%2B.yaml'
    path: ./Rules/Media/Fox+
    interval: 86400
  HBO:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/farrrr/Rules/main/Clash/Provider/Media/HBO.yaml'
    path: ./Rules/Media/HBO
    interval: 86400
  Hulu Japan:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/farrrr/Rules/main/Clash/Provider/Media/Hulu%20Japan.yaml'
    path: ./Rules/Media/Hulu_Japan
    interval: 86400
  Hulu:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/farrrr/Rules/main/Clash/Provider/Media/Hulu.yaml'
    path: ./Rules/Media/Hulu
    interval: 86400
  Japonx:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/farrrr/Rules/main/Clash/Provider/Media/Japonx.yaml'
    path: ./Rules/Media/Japonx
    interval: 86400
  JOOX:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/farrrr/Rules/main/Clash/Provider/Media/JOOX.yaml'
    path: ./Rules/Media/JOOX
    interval: 86400
  KKBOX:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/farrrr/Rules/main/Clash/Provider/Media/KKBOX.yaml'
    path: ./Rules/Media/KKBOX
    interval: 86400
  KKMedia:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/farrrr/Rules/main/Clash/Provider/Media/KKMedia.yaml'
    path: ./Rules/Media/KKMedia
    interval: 86400
  Line Media:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/farrrr/Rules/main/Clash/Provider/Media/Line%20Media.yaml'
    path: ./Rules/Media/Line_Media
    interval: 86400
  myMedia SUPER:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/farrrr/Rules/main/Clash/Provider/Media/myMedia%20SUPER.yaml'
    path: ./Rules/Media/myMedia_SUPER
    interval: 86400
  Pandora:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/farrrr/Rules/main/Clash/Provider/Media/Pandora.yaml'
    path: ./Rules/Media/Pandora
    interval: 86400
  PBS:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/farrrr/Rules/main/Clash/Provider/Media/PBS.yaml'
    path: ./Rules/Media/PBS
    interval: 86400
  Pornhub:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/farrrr/Rules/main/Clash/Provider/Media/Pornhub.yaml'
    path: ./Rules/Media/Pornhub
    interval: 86400
  Soundcloud:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/farrrr/Rules/main/Clash/Provider/Media/Soundcloud.yaml'
    path: ./Rules/Media/Soundcloud
    interval: 86400
  ViuMedia:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/farrrr/Rules/main/Clash/Provider/Media/ViuMedia.yaml'
    path: ./Rules/Media/ViuMedia
    interval: 86400
  Telegram:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/farrrr/Rules/main/Clash/Provider/Telegram.yaml'
    path: ./Rules/Telegram
    interval: 86400
  Steam:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/farrrr/Rules/main/Clash/Provider/Steam.yaml'
    path: ./Rules/Steam
    interval: 86400
  Speedtest:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/farrrr/Rules/main/Clash/Provider/Speedtest.yaml'
    path: ./Rules/Speedtest
    interval: 86400
  PayPal:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/farrrr/Rules/main/Clash/Provider/PayPal.yaml'
    path: ./Rules/PayPal
    interval: 86400
  Microsoft:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/farrrr/Rules/main/Clash/Provider/Microsoft.yaml'
    path: ./Rules/Microsoft
    interval: 86400
  # PROXY:
  #   type: http
  #   behavior: classical
  #   url: 'https://raw.githubusercontent.com/farrrr/Rules/main/Clash/Provider/Proxy.yaml'
  #   path: ./Rules/Proxy
  #   interval: 86400
  China Service:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/farrrr/Rules/main/Clash/Provider/China%20Service.yaml'
    path: ./Rules/China_Service
    interval: 86400
  Apple:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/farrrr/Rules/main/Clash/Provider/Apple.yaml'
    path: ./Rules/Apple
    interval: 86400
  Scholar:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/farrrr/Rules/main/Clash/Provider/Scholar.yaml'
    path: ./Rules/Scholar
    interval: 86400
  China IPs:
    type: http
    behavior: ipcidr
    url: 'https://raw.githubusercontent.com/farrrr/Rules/main/Clash/Provider/China%20IPs.yaml'
    path: ./Rules/China_IPs
    interval: 86400
  Blizzard:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/farrrr/Rules/main/Clash/Provider/Blizzard.yaml'
    path: ./Rules/Blizzard
    interval: 86400
  DingTalk:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/farrrr/Rules/main/Clash/Provider/DingTalk.yaml'
    path: ./Rules/DingTalk
    interval: 86400
  Sony:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/farrrr/Rules/main/Clash/Provider/Sony.yaml'
    path: ./Rules/Sony
    interval: 86400
  Domestic IPs:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/farrrr/Rules/main/Clash/Provider/Domestic%20IPs.yaml'
    path: ./Rules/Domestic_IPs
    interval: 86400
  Tencent:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/farrrr/Rules/main/Clash/Provider/Tencent.yaml'
    path: ./Rules/Tencent
    interval: 86400
  LAN:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/farrrr/Rules/main/Clash/Provider/LAN.yaml'
    path: ./Rules/LAN
    interval: 86400
